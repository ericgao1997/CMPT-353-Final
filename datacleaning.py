import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import sys

# python3 datacleaning.py osm/amenities-vancouver.json.gz

### TAG SLICING ###

# manually categorized tags to more accurately identify node use
# check SCHEMA.txt, generated by spark's print_schema

# tags that indicate food or drink service to the general public
# food establishments are considered to be high-risk due to food handling and mask policy

TAGS_FOOD = [
  'amenity:cafe',
  'bar',
  'brewery',
  'cuisine',
  'fast_food',
  'food',
  'cocktails',
  'drink',
  'happy_hours',
  'microbrewery'
]

# tags that indicate an existing capacity for medical treatment
# note that this does NOT include buildings often converted to medical facilities
# such as schools, churches, and outdoor/tent facilities during crisis
TAGS_MEDICAL = [
  'emergency',
  'healthcare'
]

# tags that imply reasonable comemrcial activity or residential use
# my falsely flag business and residences that are closed to the public
TAGS_GATHERING = [
  'sport',
  'tourism',
  'service',
  'shop',
  'social_facility',
  'religion',
  'leisure',
  'memorial',
  'kindergarten',
  'maxstay',
  'monastery:type',
  'outdoor_seating',
  'preschool',
  'shelter',
  'studio',
  'education',
  'office'
]

# tags that indicate consistent travel by vehicle and pedestrian
# expected to be well-documented, and thus the most complete data set
TAGS_TRANSPORTATION = [
  'bus',
  'car',
  'public_transport',
  'fuel', #some gas stations are unabkle to be categorized by tags, an oversight by us
  'ferry',
  'ferry_terminal'
]

# misc. tags that indicate a certain level of attention or notability
# nodes that are documented externally, have social media presence, or are indexed are more likely to be active
# the fact that these tags are added at all means the node is more likely to be active
TAGS_NOTABILITY = [
  'wikidata',
  'wikipedia:en',
  'yelp',
  'alt',
  'alt_name',
  'seating',
  'seats',
  'brand',
  'brand:wikidata'
]

### DATA CLEANING ###

def main(input_file):
  pd.options.display.max_columns = None
  pd.options.display.width = 240
  
  print("Cleaning ", input_file, "to data/")
  
  data = pd.read_json(input_file, lines=True)
  # json of form in SCHEMA.txt
  # https://wiki.openstreetmap.org/wiki/Tags
  
  # flatten json data into columns (135-ish)
  print("Flattening json elements...          (1/6)")
  tags = pd.json_normalize(data['tags'])
    
  # affix aggregate category based on tags
  print("Assigning categories based on tag... (2/6)")
  data['food'] = tags[TAGS_FOOD].isnull().all(axis=1) == False
  data['medical'] = tags[TAGS_MEDICAL].isnull().all(axis=1) == False
  data['gathering'] = tags[TAGS_GATHERING].isnull().all(axis=1) == False
  data['transport'] = tags[TAGS_TRANSPORTATION].isnull().all(axis=1) == False
  data['notable'] = tags[TAGS_NOTABILITY].isnull().all(axis=1) == False
  


  # column for number of user-specified tags (0 means untagged)
  print("Counting tags...                     (3/6)")
  data['tag_count'] = data.apply(lambda row: len(row['tags']), axis=1)
  
  # remove tag data
  print("Removing old tag data...             (4/6)")
  data = data.drop(['tags'], axis=1)
  
  # count unique amenity types
  print("Generating amenity type index...     (5/6)")
  types = data.drop_duplicates(subset='amenity', keep="last")
  
  # some sanity checks:
  """
  print(data[ (data['food']==True) | (data['medical']==True) | (data['gathering']==True) | (data['transport']==True) | (data['notable']==True)  ])
  print( (data[ (data['name']=='Petro-Canada') | (data['name']=='Shell')])['tags'] )
  print(data[data['name'].isnull() == False])
  """
  
  # output
  print("Generating output...                 (6/6)")
  types['amenity'].to_csv("data/amenity-types.csv", header=False, index=False)
  data.to_csv("data/amenities-vancouver.csv", header=True, index=True)
  tags.to_csv("data/tag-data.csv", header=True, index=False)

if __name__=='__main__':
  input_file = sys.argv[1]
  main(input_file)         